{"version":3,"sources":["../../src/chart.js"],"names":[],"mappings":"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","file":"chart.js","sourcesContent":["import d3 from 'd3';\nimport kotoAssert from './assert.js';\nimport Layer from './layer.js';\n\n// d3 is required\nkotoAssert(d3, 'd3 js is required.');\n\n/**\n * Create a koto chart\n *\n * @constructor\n *\n * @param {d3.selection} selection The chart's \"base\" DOM node. This should\n *        contain any nodes that the chart generates.\n */\nclass Chart {\n  constructor(selection) {\n    this.base = selection; // Container for chart @type {d3.selection}.\n    this.hasDrawn = false; // Has this chart been drawn at lease once?\n\n    function baseExtend(dst, maps) {\n      var setDst = function (value, key) {\n          dst.set(key, value);\n      };\n      for (var i = 0, ii = maps.length; i < ii; ++i) {\n        var map = maps[i];\n        map.forEach(setDst);\n      }\n      return dst;\n    }\n\n    this.merge = {\n      configs: function(){\n        var merged = baseExtend(this.configs, arguments);\n        return merged;\n      }.bind(this),\n      accessors: function(){\n        var merged = baseExtend(this.accessors, arguments);\n        return merged;\n      }.bind(this)\n    };\n\n    // exposed properties\n    this.configs = new Map();\n    this.accessors = new Map();\n    this.promise = null;\n\n    // private\n    this._layers = new Map();\n    this._attached = new Map();\n    this._events = new Map();\n\n    // alias\n    this.c = this.config;\n    this.a = this.accessor;\n  }\n\n  /**\n   * A \"hook\" method that you may define to modify input data before it is used\n   * to draw the chart's layers and attachments. This method will be used by all\n   * sub-classes.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on d3.chart to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param {Array} data Input data provided to @link Chart#draw}.\n   * @returns {mixed} Data to be used in drawing the chart's layers and\n   *                  attachments.\n   */\n  transform(data) { return data; }\n\n  /**\n   * A \"hook\" method that you may define to choose which mutation of the input\n   * data is sent to which of the attached charts (by name). This method will\n   * be used by all sub-classes. This only applies to charts that use the\n   * {@link Chart#attach} method.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on d3.chart to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param {String} data Name of attached chart defined in {@link Chart#attach}.\n   * @param {Array} data Input data provided to {@link Chart#draw}.\n   * @returns {mixed} Data to be used in drawing the chart's layers and\n   *                  attachments.\n   */\n  demux(name, data) { return data; }\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code before\n   * {@link Chart#draw}. This will run everytime {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on d3.chart to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * Note 2: a `postDraw` event is also fired when appropriate;\n   *\n   * @param  {[type]} data [description]\n   * @return {[type]}      [description]\n   */\n  preDraw() {}\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code after\n   * {@link Chart#draw}. This will run everytime {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on d3.chart to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param  {[type]} data [description]\n   */\n  postDraw() {}\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code after\n   * {@link Chart#draw} is called AND after all transitions for all layers\n   * and attached charts have been completed. This will run everytime\n   * {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on d3.chart to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * Note 2: a `postTransition` event is also fired when appropriate;\n   *\n   * @param  {[type]} data\n   */\n  postTransition() {}\n\n  /**\n   * Remove a layer from the chart.\n   *\n   * @param {String} name The name of the layer to remove.\n   * @returns {Layer} The layer removed by this operation.\n   */\n  unlayer(name) {\n    var layer = this.layer(name);\n\n    this._layers.delete(name);\n    delete layer._chart;\n\n    return layer;\n  }\n\n  /**\n   * Interact with the chart's {@link Layer|layers}.\n   *\n   * If only a `name` is provided, simply return the layer registered to that\n   * name (if any).\n   *\n   * If a `name` and `selection` are provided, treat the `selection` as a\n   * previously-created layer and attach it to the chart with the specified\n   * `name`.\n   *\n   * If all three arguments are specified, initialize a new {@link Layer} using\n   * the specified `selection` as a base passing along the specified `options`.\n   *\n   * The {@link Layer.draw} method of attached layers will be invoked\n   * whenever this chart's {@link Chart#draw} is invoked and will receive the\n   * data (optionally modified by the chart's {@link Chart#transform} method.\n   *\n   * @param {String} name Name of the layer to attach or retrieve.\n   * @param {d3.selection|Layer} [selection] The layer's base or a\n   *        previously-created {@link Layer}.\n   * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\n   *        constructor}\n   *\n   * @returns {Layer}\n   */\n  layer(name, selection, options) {\n    var _Chart = this;\n    var _layer;\n\n    if (arguments.length === 1) {\n      return this._layers.get(name);\n    }\n\n    // we are reattaching a previous layer, which the\n    // selection argument is now set to.\n    if (arguments.length === 2) {\n\n      if (selection instanceof Layer) {\n        selection._chart = this;\n        this._layers.set(name, selection);\n        return this._layers.get(name);\n\n      } else {\n        kotoAssert(false, 'When reattaching a layer, the second argument must be a koto layer');\n      }\n    }\n\n    selection._chart = this;\n\n    _layer = new Layer(selection, options);\n\n    _layer.remove = function () {\n      _Chart._layers.delete(name);\n      return this;\n    };\n\n    this._layers.set(name, _layer);\n\n    return _layer;\n  }\n\n  /**\n   * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\n   * method will be invoked whenever the containing chart's `draw` method is\n   * invoked.\n   *\n   * @param {String} attachmentName Name of the attachment\n   * @param {Chart} [chart] koto to register as a mix in of this chart. When\n   *        unspecified, this method will return the attachment previously\n   *        registered with the specified `attachmentName` (if any).\n   *\n   * @returns {Chart} Reference to this chart (chainable).\n   */\n  attach(attachmentName, chart) {\n    if (arguments.length === 1) {\n      return this._attached.get(attachmentName);\n    }\n\n    this._attached.set(attachmentName, chart);\n    return chart;\n  }\n\n  /**\n   * Update the chart's representation in the DOM, drawing all of its layers and\n   * any \"attachment\" charts (as attached via {@link Chart#attach}).\n   *\n   * Note: The first time you call this method, the property `hasDrawn` will be\n   * set to true. This is helpful if you want to only run some code on the first\n   * time the chart is drawn.\n   *\n   * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\n   *        this cart's {@link Layer|layers} (if any) and the {@link\n   *        Chart#draw|draw method} of this chart's attachments (if any).\n   */\n  draw(rawData) {\n    var layer, attachmentData, promises = [];\n\n    var data = this.transform(rawData);\n\n    this.preDraw(data);\n    this.trigger('preDraw', data);\n\n    for (layer of this._layers.values()) {\n      layer.draw(data);\n      promises.push(layer.promise);\n    }\n\n    for (var [attachmentName, attachment] of this._attached.entries()) {\n      attachmentData = this.demux ? this.demux(attachmentName, data) : data;\n      attachment.draw(attachmentData);\n      promises.push(attachment.promise);\n    }\n\n    this.hasDrawn = true;\n\n    this.promise = Promise.all(promises);\n\n    this.postDraw();\n    this.trigger('postDraw', data);\n\n    this.promise.then(function () {\n      this.postTransition(data);\n      this.trigger('postTransition', data);\n    }.bind(this));\n  }\n\n  /**\n   * Function invoked with the context specified when the handler was bound (via\n   * {@link Chart#on} {@link Chart#once}).\n   *\n   * @callback ChartEventHandler\n   * @param {...*} arguments Invoked with the arguments passed to {@link\n   *         Chart#trigger}\n   */\n\n  /**\n   * Subscribe a callback function to an event triggered on the chart. See {@link\n   * Chart#once} to subscribe a callback function to an event for one occurence.\n   *\n   * @externalExample {runnable} chart-on\n   *\n   * @param {String} name Name of the event\n   * @param {ChartEventHandler} callback Function to be invoked when the event\n   *        occurs\n   * @param {Object} [context] Value to set as `this` when invoking the\n   *        `callback`. Defaults to the chart instance.\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  on(name, callback, context) {\n    var events;\n    if (this._events.has(name)) {\n      events = this._events.get(name);\n    } else {\n      events = new Set();\n    }\n\n    events.add({\n      callback: callback,\n      context: context || this,\n      _chart: this\n    });\n\n    this._events.set(name, events);\n    return this;\n  }\n\n  /**\n   * Subscribe a callback function to an event triggered on the chart. This\n   * function will be invoked at the next occurance of the event and immediately\n   * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\n   * event indefinitely.\n   *\n   * @externalExample {runnable} chart-once\n   *\n   * @param {String} name Name of the event\n   * @param {ChartEventHandler} callback Function to be invoked when the event\n   *        occurs\n   * @param {Object} [context] Value to set as `this` when invoking the\n   *        `callback`. Defaults to the chart instance\n   *\n   * @returns {Chart} A reference to this chart (chainable)\n   */\n  once(name, callback, context) {\n    var self = this;\n    var _once = function() {\n      self.off(name, _once);\n      callback.apply(this, arguments);\n    };\n    return this.on(name, _once, context);\n  }\n\n  /**\n   * Unsubscribe one or more callback functions from an event triggered on the\n   * chart. When no arguments are specified, *all* handlers will be unsubscribed.\n   * When only a `name` is specified, all handlers subscribed to that event will\n   * be unsubscribed. When a `name` and `callback` are specified, only that\n   * function will be unsubscribed from that event. When a `name` and `context`\n   * are specified (but `callback` is omitted), all events bound to the given\n   * event with the given context will be unsubscribed.\n   *\n   * @externalExample {runnable} chart-off\n   *\n   * @param {String} [name] Name of the event to be unsubscribed\n   * @param {ChartEventHandler} [callback] Function to be unsubscribed\n   * @param {Object} [context] Contexts to be unsubscribe\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  off(name, callback, context) {\n\n    // remove all events\n    if (arguments.length === 0) {\n      this._events.clear();\n      return this;\n    }\n\n    // remove all events for a specific name\n    if (arguments.length === 1) {\n      if (this._events.has(name)) {\n        this._events.get(name).clear();\n      }\n      return this;\n    }\n\n    // remove all events that match whatever combination of name, context\n    // and callback.\n\n    this._events.get(name).forEach((event, clone, map) => {\n      if ((callback && callback === clone.callback) ||\n          (context && context === clone.context)) {\n        map.delete(event);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Publish an event on this chart with the given `name`.\n   *\n   * @externalExample {runnable} chart-trigger\n   *\n   * @param {String} name Name of the event to publish\n   * @param {...*} arguments Values with which to invoke the registered\n   *        callbacks.\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  trigger(name, ...args) {\n    if (this._events.has(name)) {\n      this._events.get(name).forEach((event) => {\n        event.callback.call(event.context, ...args);\n      });\n    }\n    return this;\n  }\n  /**\n   * Get and set chart options (or configs)\n   *\n   * @param  {mixed} nameOrObject name of item getting or setting\n   *                              or its an object with key value pairs.\n   * @param  {mixed} value the value for config item witha that name.\n   * @return {mixed} if getting, its the value. if setting it is the chart instance.\n   */\n  config(nameOrObject, value) {\n    var key;\n    var definition;\n    var _Chart = this;\n\n    function setPercentage () {\n      function calcultePerecentage (arr, initialValue) {\n        var min = Math.min.call(null, arr.map(function (name) { return _Chart.config(name); }));\n        return initialValue / min;\n      }\n\n      if (definition.constrain === true) {\n        definition.percentage = calcultePerecentage(['width', 'height'], definition.value);\n      } else if (Array.isArray(definition.constrain)) {\n        definition.percentage = calcultePerecentage(definition.constrain, definition.value);\n      } else {\n        definition.percentage = calcultePerecentage([definition.constrain], definition.value);\n      }\n    }\n\n    if (arguments.length === 0) {\n      return this.configs;\n    }\n\n    if (arguments.length === 1) {\n      if (typeof nameOrObject === 'object') {\n        for (key in nameOrObject) {\n          if(this.configs.has(key)) {\n            definition = this.configs.get(key);\n            if (definition.hasOwnProperty('setter')) {\n              definition.value = definition.setter.call(definition, nameOrObject[key]);\n            } else {\n              definition.value = nameOrObject[key];\n            }\n            if (definition.hasOwnProperty('constrain')) {\n              setPercentage();\n            }\n            this.configs.set(key, definition);\n          } else {\n            console.warn(`config with name ${nameOrObject} is not defined.`);\n          }\n        }\n        return this;\n      }\n\n      kotoAssert(this.configs.has(nameOrObject), `${nameOrObject} is not a valid option.`);\n      definition = this.configs.get(nameOrObject);\n      if (definition.hasOwnProperty('getter')) {\n        return definition.getter.call(definition);\n      }\n      return definition.value;\n    }\n\n    if(arguments.length === 2) {\n      if (this.configs.has(nameOrObject)) {\n        definition = this.configs.get(nameOrObject);\n        if (definition.hasOwnProperty('setter')) {\n          definition.value = definition.setter.call(definition, value);\n        } else {\n          definition.value = value;\n        }\n        if (definition.hasOwnProperty('constrain')) {\n          setPercentage();\n        }\n        this.configs.set(nameOrObject, definition);\n      } else {\n        console.warn(`config with name ${nameOrObject} is not defined.`);\n      }\n      return this;\n    }\n  }\n\n  /**\n   * This will get or set any of the chart's accessors.\n   *\n   * @param  {String or Object} item If string, it will return the function for that accessor item.\n   *                                 If object, it will update that accessor with set function.\n   * @param  {function} [value] The function to update accessor item with.\n   * @return {object} The chart to preserve chainability.\n   */\n  accessor (item, value) {\n    var key;\n    if (arguments.length === 0) {\n      return this.accessors;\n    }\n\n    if (arguments.length === 1) {\n      if (typeof item === 'string') {\n        kotoAssert(this.accessors.has(item), `${item} is not a valid accessor.`);\n        return this.accessors.get(item);\n      } else {\n        for (key in item) {\n          this.accessors.set(key, item[key]);\n        }\n      }\n    } else {\n      this.accessors.set(item, value);\n    }\n    return this;\n  }\n\n  /**\n   * This will extend a chart by passing in an object of initialize function.\n   * @param  {Object || function} init Initialize function of object with initialize method.\n   * @return {Construtor}      Chart constructor\n   */\n  static extend(init) {\n    class chart extends this {\n      constructor(selection) {\n        var key;\n        super(selection);\n\n        if (typeof init === 'function') {\n          init.call(this);\n        } else {\n          for (key in init) {\n            this[key] = init[key];\n          }\n          this.initialize.call(this);\n        }\n\n      }\n    }\n    return chart;\n  }\n}\n\nexport default Chart;\n"]}