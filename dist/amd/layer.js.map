{"version":3,"sources":["../../src/layer.js"],"names":[],"mappings":"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","file":"layer.js","sourcesContent":["import kotoAssert from './assert.js';\n\n\n/**\n * Create a layer using the provided `base`. The layer instance is *not*\n * exposed to d3.chart users. Instead, its instance methods are mixed in to the\n * `base` selection it describes; users interact with the instance via these\n * bound methods.\n *\n * @private\n * @class\n *\n * @param {d3.selection} base The containing DOM node for the layer.\n */\nclass Layer {\n  constructor(base, options) {\n    this._base = base;\n    this._handlers = {};\n    this._lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\n\n    if (options) {\n      // Set layer methods (required)\n      this.dataBind = options.dataBind;\n      this.insert = options.insert;\n\n      // Bind events (optional)\n      if ('events' in options) {\n        for (var eventName in options.events) {\n          this.on(eventName, options.events[eventName]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\n   * implementation is \"virtual\"--it *must* be overridden by Layer instances.\n   *\n   * @param {Array} data Value passed to {@link Layer#draw}\n   */\n  dataBind() {\n    kotoAssert(false, 'Layers must specify a dataBind method.');\n  }\n\n  /**\n   * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\n   * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\n   * Layer instances.\n   */\n  insert() {\n    kotoAssert(false, 'Layers must specify an `insert` method.');\n  }\n\n  /**\n   * Subscribe a handler to a \"lifecycle event\". These events (and only these\n   * events) are triggered when {@link Layer#draw} is invoked--see that method\n   * for more details on lifecycle events.\n   *\n   * @param {String} eventName Identifier for the lifecycle event for which to\n   *        subscribe.\n   * @param {Function} handler Callback function\n   *\n   * @returns {Chart} Reference to the layer instance (chaining).\n   */\n  on(eventName, handler, options) {\n    options = options || {};\n\n    kotoAssert(this._lifecycleRe.test(eventName),\n      `Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n    if (!(eventName in this._handlers)) {\n      this._handlers[eventName] = [];\n    }\n    this._handlers[eventName].push({\n      callback: handler,\n      chart: options.chart || null\n    });\n\n    return this;\n  }\n\n  /**\n   * Unsubscribe the specified handler from the specified event. If no handler is\n   * supplied, remove *all* handlers from the event.\n   *\n   * @param {String} eventName Identifier for event from which to remove\n   *        unsubscribe\n   * @param {Function} handler Callback to remove from the specified event\n   *\n   * @returns {Chart} Reference to the layer instance (chaining).\n   */\n  off(eventName, handler) {\n    var handlers = this._handlers[eventName];\n    var idx;\n\n    kotoAssert(this._lifecycleRe.test(eventName),\n      `Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n    if (!handlers) {\n      return this;\n    }\n\n    if (arguments.length === 1) {\n      handlers.length = 0;\n      return this;\n    }\n\n    for (idx = handlers.length - 1; idx > -1; --idx) {\n      if (handlers[idx].callback === handler) {\n        handlers.splice(idx, 1);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Render the layer according to the input data: Bind the data to the layer\n   * (according to {@link Layer#dataBind}, insert new elements (according to\n   * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\n   * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\n   *\n   * - update\n   * - update:transition\n   * - enter\n   * - enter:transition\n   * - exit\n   * - exit:transition\n   *\n   * @param {Array} data Data to drive the rendering.\n   */\n  draw(data) {\n    var bound,\n      entering,\n      events,\n      selection,\n      method,\n      handlers,\n      eventName,\n      idx,\n      len,\n      tidx,\n      tlen,\n      promises = [];\n\n    function endall(transition, callback) {\n      var n = 0;\n      if (transition.size() === 0) {\n        callback();\n      } else {\n        transition\n          .each(function() {\n            ++n;\n          })\n          .each('interrupt.promise', function () {\n            callback.apply(this, arguments);\n          })\n          .each('end.promise', function () {\n            if (!--n) {\n              callback.apply(this, arguments);\n            }\n          });\n      }\n    }\n\n    function promiseCallback (resolve) {\n      selection.call(endall, function() {\n        resolve(true);\n      });\n    }\n\n    bound = this.dataBind.call(this._base, data);\n\n    kotoAssert(bound instanceof d3.selection,\n      'Invalid selection defined by `Layer#dataBind` method.');\n    kotoAssert(bound.enter, 'Layer selection not properly bound.');\n\n    entering = bound.enter();\n    entering._chart = this._base._chart;\n\n    events = [\n      {\n        name: 'update',\n        selection: bound\n      },\n      {\n        name: 'enter',\n        selection: entering,\n        method: this.insert\n      },\n      {\n        name: 'merge',\n        // Although the `merge` lifecycle event shares its selection object\n        // with the `update` lifecycle event, the object's contents will be\n        // modified when d3.chart invokes the user-supplied `insert` method\n        // when triggering the `enter` event.\n        selection: bound\n      },\n      {\n        name: 'exit',\n        // Although the `exit` lifecycle event shares its selection object\n        // with the `update` and `merge` lifecycle events, the object's\n        // contents will be modified when d3.chart invokes\n        // `d3.selection.exit`.\n        selection: bound,\n        method: bound.exit\n      }\n    ];\n\n    for (var i = 0, l = events.length; i < l; ++i) {\n      eventName = events[i].name;\n      selection = events[i].selection;\n      method = events[i].method;\n\n      // Some lifecycle selections modify shared state, so they must be\n      // deferred until just prior to handler invocation.\n      if (typeof method === 'function') {\n        selection = method.call(selection);\n      }\n\n      if (selection.empty()) {\n        continue;\n      }\n\n      // Although `selection instanceof d3.selection` is more explicit,\n      // it fails in IE8, so we use duck typing to maintain\n      // compatability.\n\n      kotoAssert(selection && selection instanceof d3.selection,\n        `Invalid selection defined for ${eventName} lifecycle event.`);\n\n      handlers = this._handlers[eventName];\n\n      if (handlers) {\n        for (idx = 0, len = handlers.length; idx < len; ++idx) {\n          // Attach a reference to the parent chart so the selection\"s\n          // `chart` method will function correctly.\n          selection._chart = handlers[idx].chart || this._base._chart;\n          selection.call(handlers[idx].callback);\n        }\n      }\n\n      handlers = this._handlers[eventName + ':transition'];\n\n      if (handlers && handlers.length) {\n        selection = selection.transition();\n        for (tlen = handlers.length, tidx = 0; tidx < tlen; ++tidx) {\n          selection._chart = handlers[tidx].chart || this._base._chart;\n          selection.call(handlers[tidx].callback);\n          promises.push(new Promise(promiseCallback));\n        }\n      }\n      this.promise = Promise.all(promises);\n    }\n  }\n}\n\nexport default Layer;\n"]}